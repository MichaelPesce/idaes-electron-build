name: App build
run-name: App Build For ${{ inputs.project }}
on:
  workflow_call:
    inputs:
      os:
        type: string
        default: win64
      os-version:
        type: string
        default: windows-latest
      artifact-file-extension:
        type: string
        default: exe
      project:
        type: string
        default: watertap
      pip-install-target:
        type: string
        default: watertap@git+https://github.com/watertap-org/watertap@main
      artifact-name:
          type: string
          default: ${{ inputs.project }}-Flowsheet-Processor
      idaes-flowsheet-processor-ui-repo:
        type: string
        default: watertap-org/idaes-flowsheet-processor-ui
      idaes-flowsheet-processor-ui-ref:
        type: string
        default: main
      package-build-number:
        type: string
    secrets:
      AZURE_KEY_VAULT_URI:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_SECRET:
        required: false
      AZURE_CERT_NAME:
        required: false
      APPLE_BUILD_CERTIFICATE_BASE64:
        required: false
      P12_PASSWORD:
        required: false
      KEYCHAIN_PASSWORD:
        required: false
      APPLE_ID:
        required: false
      APPLE_ID_PASSWORD:
        required: false
      NOTARIZE_TOOL:
        required: false
      TEAM_ID:
        required: false

defaults:
  run:
    # -l: use login shell (required when using Conda)
    shell: bash -l {0}

jobs:
  electron-build:
    name: ${{ inputs.os }} build

    runs-on: ${{ inputs.os-version }}

    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: environment.yml
          activate-environment: flowsheet-processor-env
          miniforge-version: latest
      
      - name: Install Azure Signtool
        if: runner.os == 'Windows'
        run: |
          dotnet tool install --global AzureSignTool
      
    
      - name: Install the Apple certificate
        if: runner.os == 'macOS'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

        ## use this for naming package
      - name: Generate Package Build Number
        id: generate-build-number
        run: |
          if [ -z "${{ inputs.package-build-number }}"]; then
            echo "build-number=$(date +'%y.%m.%d')" >> $GITHUB_OUTPUT
          else
            echo "build-number=${{ inputs.package-build-number }}" >> $GITHUB_OUTPUT
          fi

        ## set full path for artifact (useful to define here because it is referenced multiple times later)
      - name: Set artifact path
        id: artifact-path
        run: echo "path=electron/dist/${{ inputs.artifact-name }}_${{ steps.generate-build-number.outputs.build-number }}_${{ inputs.os }}.${{ inputs.artifact-file-extension }}" >> $GITHUB_OUTPUT

      - name: Install IDAES Flowsheet Processor UI locally
        working-directory: ./electron
        # run: git clone https://github.com/watertap-org/idaes-flowsheet-processor-ui.git && cd idaes-flowsheet-processor-ui && pip install --progress-bar off .
        run: git clone https://github.com/${{ inputs.idaes-flowsheet-processor-ui-repo }}.git && cd idaes-flowsheet-processor-ui && git fetch --all --tags && git checkout ${{ inputs.idaes-flowsheet-processor-ui-ref }} && pip install --progress-bar off .

        ## creates package.json and .env files
      - name: Set configuration files
        run: python scripts/set_configuration.py -p ${{ inputs.project }} -v ${{ steps.generate-build-number.outputs.build-number }} -a ${{ inputs.artifact-name }}

      - name: Install Electron JS dependencies
        working-directory: ./electron
        run:  npm install

      - name: Install frontend JS dependencies
        working-directory: ./electron/idaes-flowsheet-processor-ui/frontend 
        run: npm clean-install

      - name: Pip install ${{ inputs.pip-install-target }}
        run: pip install --progress-bar off ${{ inputs.pip-install-target }}

      - name: Get idaes extensions
        run: idaes get-extensions

      - name: Transfer Entry points
        working-directory: ./scripts
        run: |
          python move_entrypoints.py -p ${{ inputs.project }}

      - name: Build Backend
        working-directory: ./pyinstaller
        run: pyinstaller -y --clean --distpath ../electron/py_dist main.spec

      - name: Build Frontend
        working-directory: ./electron/idaes-flowsheet-processor-ui/frontend
        env:
          CI: false
        run: npm run build

      - name: Build ${{ inputs.os }} Distribution
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          NOTARIZE_TOOL: ${{ secrets.NOTARIZE_TOOL }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        working-directory: ./electron
        run: |
          if [ "${{ inputs.os }}" = "arm64" ]; then
            npm run electron-build-mac
          else
            npm run electron-build-win
          fi

      - name: Sign Windows Distribution
        if: runner.os == 'Windows'
        run: |
          AzureSignTool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.digicert.com -v ${{ steps.artifact-path.outputs.path }}

      - name: Upload artifact for ${{ runner.os }} build
        uses: actions/upload-artifact@v4
        if: always()
        with:
            name: ${{ inputs.project }}-${{ inputs.os }}-dist
            path: ${{ steps.artifact-path.outputs.path }}
